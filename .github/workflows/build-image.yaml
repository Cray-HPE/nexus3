name: Build image

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  registry: artifactory.algol60.net/csm-docker

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.registry }}/${{ startsWith(github.ref, 'refs/tags/v') && 'stable' || 'unstable' }}/nexus3
          labels: |
            org.opencontainers.image.vendor=Hewlett Packard Enterprise Development LP
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=sha,format=short,prefix=
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Check cosign install
        run: cosign version

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.COSIGN_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.COSIGN_GCP_SA_KEY }}
          export_default_credentials: true

      - name: Use gcloud CLI
        run: gcloud info

      - name: Login to Artifactory Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.registry }}
          username: ${{ secrets.ARTIFACTORY_ALGOL60_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_ALGOL60_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Sign image tags
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          IMAGE: ${{ steps.meta.outputs.tags }}
        run: cosign sign -key $COSIGN_KEY $IMAGE

      # TODO: Scan image and save results
